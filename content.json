{"pages":[{"title":"about","text":"","path":"about/index.html","date":"01-13","excerpt":""},{"title":"404","text":"","path":"404/index.html","date":"01-13","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"01-13","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"01-13","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"01-13","excerpt":""}],"posts":[{"title":"Less, Sass和Stylus","text":"Less, Sass和StylusLESSLESS 做为 CSS 的一种形式的扩展，在现有的 CSS 语法上，添加了很多额外的功能，拥有诸如 Sass 和 Stylus 之类的预处理器，它们也给我们提供了许多优于纯 CSS 的好处。 变量 - 它可以让你更轻松的在整个样式表中定义和更改值 Mixins - 可以让你重用或者组合样式，而且支持传递参数。 函数 - 它为你提供了一些方便的程序去操纵颜色，转换图像等。 变量我们可以用 @ 来声明一个变量来保存需要的样式 @nice-blue: #5B83AD;@light-blue: @nice-blue + #111; .header { color: @light-blue; } 转译输出后: .header { color: #6c94be; } 当然也可以用已定义的变量来为其他变量定义: @str: “I am str.”;@var: ‘str’;content: @@var; 转译输出后: content: “I am str.”; *请注意 LESS 中的变量为 “常量” ，所以只能定义一次.* 混合在 LESS 中我们可以将一些通用的属性集定义，然后在其他标签中去调用这个属性集. .border { border-top: solid 1px red; border-bottom: solid 2px black;} 那如果我们现在需要在其他标签中引入这个属性集，那么我们只需要在任何标签中调用就可以了: menu a { color: #111; .border;}.post a { color: red; .border;} .border 里面的属性样式就会在 #menu a 和 .post a中体现出来。转译输出后: menu a { color: #111; border-top: solid 1px red; border-bottom: solid 2px black;}.post a { color: blue; border-top: solid 1px red; border-bottom: solid 2px black;} 任何 CSS class, id 或者 元素 属性集都可以以同样的方式引入. 带参数混合在 LESS 中，你还可以像函数一样定义一个带参数的属性集合,它支持传入参数 .border-radius (@radius) { border-radius: @radius; -moz-border-radius: @radius; -webkit-border-radius: @radius;} 然后像这样调用: header { .border-radius(4px);}.button { .border-radius(6px);} 我们还可以给参数设置默认值: .border-radius (@radius: 5px) { border-radius: @radius; -moz-border-radius: @radius; -webkit-border-radius: @radius;} 所以现在如果像这样调用的话: header { .border-radius;} radius的值就会是5px. 嵌套 ul { background-color: #03A9F4; padding: 10px; list-style: none; li { background-color: #fff; border-radius: 3px; margin: 10px 0; }} 编译成 CSS 代码： ul { background-color: #03A9F4; padding: 10px; list-style: none;}ul li { background-color: #fff; border-radius: 3px; margin: 10px 0;} 就像在其它高级语言中一样， Less 的变量根据范围接受它们的值。如果在指定范围内没有关于变量值的声明， less 会一直往上查找，直至找到离它最近的声明。 StylusStylus 与 Less 同样是 css 的预处理器。它没有封号、花括号、逗号也是可以执行的。 例如： p margin 0 padding 0 编译后为： p { margin: 0; padding: 0;} 变量Stylus 中也可以将常用的参数定义为变量，在需要的地方直接引用变量即可 例如： font-size = 16px //单一变量font = 12px/16px ‘微软雅黑’ //变量表达式$width = 16px //可以带标示符 a font font //直接引用单一变量 width $width //直接引用变量表达式 margin-left (@width/2) //可以用@来访问该属性当前对应的值 转译后为： a { font: 0.75px ‘微软雅黑’; width: 16px; margin-left: 8px;} Stylus 中也可用 HTML 结构来表现 CSS 层级关系 body color red ul line-height 20px height 20px font-size 16px li display inline-block padding 10px border 1px solid #ccc text-align center a color red font-size 12px 转译后为： body { color: #f00;}body ul { line-height: 20px; height: 20px; font-size: 16px;}body ul li { display: inline-block; padding: 10px; border: 1px solid #ccc; text-align: center;}body ul li a { color: #f00; font-size: 12px;} SASSSASS 的使用与前两者大体相同，在 SASS 中我们也可以来声明一个变量 $base-gap: 10px;$base-color: #333;.test { margin-top: $base-gap; color: $base-color;} 在这里我们能看到 SASS 声明变量与 LESS 和 Stylus 还是有不同的，在LESS 中，我们用 @ 符号来声明一个变量，在 Stylus 中，我们也可以用 @ 符号或者什么都不用。而在 SASS中 我们需要用 $ 符号来声明变量 在 SASS 中有默认变量这一说法：如果这个变量被声明赋值了，那就用它声明的值，否则就用默认值。这在书写 SASS 库文件时非常有用。设置默认变量的方法也非常简单，只需在变量值后加上 !default $color: #ccc;$color: #000 !default;p { color: $color;} 嵌套方法 .list { margin-top: 10;}.list li { padding-left: 15px;}.list a { color: #333;}.list a:hover { text-decoration: none;} 用嵌套方法写就是： .list { margin-top: 10px; li { padding-left: 15px; } a { color: #333; &amp;:hover { text-decoration: none; } }} 嵌套代码中的 &amp; 表示父元素选择器。 下载方法LESS：npm install -g less 安装完成后，你将可以在任何打开的窗口中使用 lessc 命令，这个命令允许你将 .less 文件编译成纯 CSS 文件，像下面这样： lessc styles.less &gt; styles.css Stylus：npm install -g stylus 建立一个stylusExample/，再在里面建立 src 目录专门存放 stylus 文件，在里面建立 example.styl 文件。然后在 stylusExample 目录下面执行下面命令 stylus --compress src/ 输出 compiled src/example.css ，这个时候表示你生成成功了，带上 –compress 参数表示你生成压缩的CSS文件。 stylus --css css/example.css css/out.styl CSS转换成stylstylus help box-shadow CSS属性的帮助stylus --css test.css 输出基本名一致的.styl文件 SASSSass 基于 Ruby 编写，所以安装 Sass 分2步：先安装Ruby的环境，再安装Sass。 一、在 Ruby 官网选择电脑系统对应的版本下载、安装，建议默认路径即可。安装过程中注意勾选第二项：Add Ruby executablesto your PATH。安装完毕在命令行环境中通过 ruby -v 查看是否成功。 二、Ruby安装成功之后，它自带的包管理工具 gem 也就安装好了。直接打开命令行通过gem 执行 Sass 安装命令，再查看是否安装成功： gem install sass sass -v 查看是否安装成功 经过简单的了解和尝试后，我比较喜欢 Stylus 得益于以下几点： 简短直观，缩进让CSS的层次非常直观 @ 属性引用可以减少维护量 函数和Mixin，重用的利器","path":"2018/01/13/Less, Sass和Stylus/","date":"01-13","excerpt":""},{"title":"first","text":"欢迎来到我的个人技术博客","path":"2018/01/13/first/","date":"01-13","excerpt":""},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2018/01/13/hello-world/","date":"01-13","excerpt":""}]}